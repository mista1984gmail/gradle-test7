plugins {
    id 'java'
    id 'jacoco'
}

group 'mitskevich'
archivesBaseName = 'utils'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

task jacocoReport(type: JacocoReport) {
    reports {
        xml {
            enabled true
        }
        html {
            enabled true
        }
    }
    jacocoTestReport {
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: 'com/exclude/**')
            }))
        }
    }
}

test.finalizedBy jacocoTestReport
jacocoTestReport.dependsOn test

jar{
    manifest{
        attributes "Main-Class": 'com.mitskevich.Main'
        attributes('Implementation-Title': project.archivesBaseName,
                'Implementation-Version': project.version)

    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from configurations.runtimeClasspath.files.collect{zipTree(it)}
}

task copyDocs(type: Copy) {
    from 'build/libs/'
    into '../core/libs'
}

jar.finalizedBy copyDocs
copyDocs.dependsOn jar

apply plugin: CheckUseJacocoForTesting

class CheckUseJacocoForTesting implements Plugin<Project> {

    @Override
    void apply(Project project) {
        project.task("report_jacoco_test")
                .doLast {
                    File reportJacocoDir = project.file('reports/jacoco')
                    Date createJacocoIndexFile;
                    String report = "";
                    if (!reportJacocoDir.exists()) {
                        project.mkdir(reportJacocoDir)
                    }
                    File reportsJacocoDir = project.file('build/reports/jacoco')
                    if (reportsJacocoDir.exists()) {
                        File jacocoIndex = new File("build/reports/jacoco/test/html/index.html")
                        if (jacocoIndex.exists()) {
                            createJacocoIndexFile = new Date(jacocoIndex.lastModified())
                        }
                        report = "Module ${project.name.toString().toUpperCase()} contains library JaCoCo for testing. \nLast test completed " + createJacocoIndexFile
                    } else {
                        report = "Module ${project.name.toString().toUpperCase()} don't contain library JaCoCo for testing."
                    }
                    File reportJacocoFile = new File("reports/jacoco/${project.name}-test-report.txt")
                    reportJacocoFile.createNewFile()
                    reportJacocoFile.write(report)
                }
    }
}